// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password_hash, bio, profile_image_url, domain)
VALUES ($1, $2, $3, $4, $5, $6, $7)
    RETURNING id, name, email, password_hash, bio, profile_image_url, domain, created_at, updated_at
`

type CreateUserParams struct {
	ID              uuid.UUID
	Name            string
	Email           string
	PasswordHash    string
	Bio             sql.NullString
	ProfileImageUrl sql.NullString
	Domain          CelebrityDomain
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
		arg.ProfileImageUrl,
		arg.Domain,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Domain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, bio, profile_image_url, domain, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Domain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, bio, profile_image_url, domain, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Domain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, name, email, password_hash, bio, profile_image_url, domain, created_at, updated_at FROM users
WHERE name = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Domain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password_hash, bio, profile_image_url, domain, created_at, updated_at FROM users
ORDER BY created_at DESC
    LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.Bio,
			&i.ProfileImageUrl,
			&i.Domain,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name = COALESCE($2, name),
    email = COALESCE($3, email),
    password_hash = COALESCE($4, password_hash),
    bio = COALESCE($5, bio),
    profile_image_url = COALESCE($6, profile_image_url),
    domain = COALESCE($7, domain),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
    RETURNING id, name, email, password_hash, bio, profile_image_url, domain, created_at, updated_at
`

type UpdateUserParams struct {
	ID              uuid.UUID
	Name            string
	Email           string
	PasswordHash    string
	Bio             sql.NullString
	ProfileImageUrl sql.NullString
	Domain          CelebrityDomain
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
		arg.ProfileImageUrl,
		arg.Domain,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Domain,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
