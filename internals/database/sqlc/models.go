// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type CelebrityDomain string

const (
	CelebrityDomainSports      CelebrityDomain = "sports"
	CelebrityDomainCinema      CelebrityDomain = "cinema"
	CelebrityDomainPolitics    CelebrityDomain = "politics"
	CelebrityDomainMusic       CelebrityDomain = "music"
	CelebrityDomainBusiness    CelebrityDomain = "business"
	CelebrityDomainInfluencer  CelebrityDomain = "influencer"
	CelebrityDomainComedy      CelebrityDomain = "comedy"
	CelebrityDomainLiterature  CelebrityDomain = "literature"
	CelebrityDomainScience     CelebrityDomain = "science"
	CelebrityDomainTechnology  CelebrityDomain = "technology"
	CelebrityDomainArt         CelebrityDomain = "art"
	CelebrityDomainFashion     CelebrityDomain = "fashion"
	CelebrityDomainGaming      CelebrityDomain = "gaming"
	CelebrityDomainTravel      CelebrityDomain = "travel"
	CelebrityDomainFood        CelebrityDomain = "food"
	CelebrityDomainHealth      CelebrityDomain = "health"
	CelebrityDomainEducation   CelebrityDomain = "education"
	CelebrityDomainEnvironment CelebrityDomain = "environment"
	CelebrityDomainHistory     CelebrityDomain = "history"
	CelebrityDomainPhilosophy  CelebrityDomain = "philosophy"
	CelebrityDomainReligion    CelebrityDomain = "religion"
	CelebrityDomainActivism    CelebrityDomain = "activism"
	CelebrityDomainJournalism  CelebrityDomain = "journalism"
	CelebrityDomainPhotography CelebrityDomain = "photography"
	CelebrityDomainTheater     CelebrityDomain = "theater"
	CelebrityDomainOther       CelebrityDomain = "other"
)

func (e *CelebrityDomain) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CelebrityDomain(s)
	case string:
		*e = CelebrityDomain(s)
	default:
		return fmt.Errorf("unsupported scan type for CelebrityDomain: %T", src)
	}
	return nil
}

type NullCelebrityDomain struct {
	CelebrityDomain CelebrityDomain
	Valid           bool // Valid is true if CelebrityDomain is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCelebrityDomain) Scan(value interface{}) error {
	if value == nil {
		ns.CelebrityDomain, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CelebrityDomain.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCelebrityDomain) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CelebrityDomain), nil
}

type Friendship struct {
	UserID    uuid.UUID
	FriendID  uuid.UUID
	CreatedAt time.Time
}

type Post struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Title     string
	Body      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Tag struct {
	ID        uuid.UUID
	Name      string
	CreatedAt sql.NullTime
}

type User struct {
	ID              uuid.UUID
	Name            string
	Email           string
	PasswordHash    string
	Bio             sql.NullString
	ProfileImageUrl sql.NullString
	Domain          CelebrityDomain
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

type UserTag struct {
	UserID uuid.UUID
	TagID  uuid.UUID
}
